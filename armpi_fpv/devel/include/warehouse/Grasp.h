// Generated by gencpp from file warehouse/Grasp.msg
// DO NOT EDIT!


#ifndef WAREHOUSE_MESSAGE_GRASP_H
#define WAREHOUSE_MESSAGE_GRASP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <warehouse/Pose.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace warehouse
{
template <class ContainerAllocator>
struct Grasp_
{
  typedef Grasp_<ContainerAllocator> Type;

  Grasp_()
    : grasp_pos()
    , grasp_approach()
    , grasp_retreat()
    , up(0.0)
    , grasp_posture(0)
    , pre_grasp_posture(0)  {
    }
  Grasp_(const ContainerAllocator& _alloc)
    : grasp_pos(_alloc)
    , grasp_approach(_alloc)
    , grasp_retreat(_alloc)
    , up(0.0)
    , grasp_posture(0)
    , pre_grasp_posture(0)  {
  (void)_alloc;
    }



   typedef  ::warehouse::Pose_<ContainerAllocator>  _grasp_pos_type;
  _grasp_pos_type grasp_pos;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _grasp_approach_type;
  _grasp_approach_type grasp_approach;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _grasp_retreat_type;
  _grasp_retreat_type grasp_retreat;

   typedef double _up_type;
  _up_type up;

   typedef int16_t _grasp_posture_type;
  _grasp_posture_type grasp_posture;

   typedef int16_t _pre_grasp_posture_type;
  _pre_grasp_posture_type pre_grasp_posture;





  typedef boost::shared_ptr< ::warehouse::Grasp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::warehouse::Grasp_<ContainerAllocator> const> ConstPtr;

}; // struct Grasp_

typedef ::warehouse::Grasp_<std::allocator<void> > Grasp;

typedef boost::shared_ptr< ::warehouse::Grasp > GraspPtr;
typedef boost::shared_ptr< ::warehouse::Grasp const> GraspConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::warehouse::Grasp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::warehouse::Grasp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::warehouse::Grasp_<ContainerAllocator1> & lhs, const ::warehouse::Grasp_<ContainerAllocator2> & rhs)
{
  return lhs.grasp_pos == rhs.grasp_pos &&
    lhs.grasp_approach == rhs.grasp_approach &&
    lhs.grasp_retreat == rhs.grasp_retreat &&
    lhs.up == rhs.up &&
    lhs.grasp_posture == rhs.grasp_posture &&
    lhs.pre_grasp_posture == rhs.pre_grasp_posture;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::warehouse::Grasp_<ContainerAllocator1> & lhs, const ::warehouse::Grasp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace warehouse

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::warehouse::Grasp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::warehouse::Grasp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::warehouse::Grasp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::warehouse::Grasp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::warehouse::Grasp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::warehouse::Grasp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::warehouse::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70d37fa314d53b4952d2f54caf3874d2";
  }

  static const char* value(const ::warehouse::Grasp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70d37fa314d53b49ULL;
  static const uint64_t static_value2 = 0x52d2f54caf3874d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::warehouse::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "warehouse/Grasp";
  }

  static const char* value(const ::warehouse::Grasp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::warehouse::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 夹取时的姿态和位置\n"
"warehouse/Pose grasp_pos\n"
"\n"
"# 接近时的距离和方向\n"
"geometry_msgs/Vector3 grasp_approach\n"
"\n"
"# 撤离时的距离和方向\n"
"geometry_msgs/Vector3 grasp_retreat\n"
"\n"
"# 抬高高度\n"
"float64 up\n"
"\n"
"# 夹取时夹持器姿态\n"
"int16 grasp_posture\n"
"\n"
"# 夹取前夹持器姿态\n"
"int16 pre_grasp_posture\n"
"\n"
"\n"
"================================================================================\n"
"MSG: warehouse/Pose\n"
"geometry_msgs/Point position\n"
"warehouse/Rotate rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: warehouse/Rotate\n"
"float64 r\n"
"float64 p\n"
"float64 y\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::warehouse::Grasp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::warehouse::Grasp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasp_pos);
      stream.next(m.grasp_approach);
      stream.next(m.grasp_retreat);
      stream.next(m.up);
      stream.next(m.grasp_posture);
      stream.next(m.pre_grasp_posture);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Grasp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::warehouse::Grasp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::warehouse::Grasp_<ContainerAllocator>& v)
  {
    s << indent << "grasp_pos: ";
    s << std::endl;
    Printer< ::warehouse::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_pos);
    s << indent << "grasp_approach: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_approach);
    s << indent << "grasp_retreat: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_retreat);
    s << indent << "up: ";
    Printer<double>::stream(s, indent + "  ", v.up);
    s << indent << "grasp_posture: ";
    Printer<int16_t>::stream(s, indent + "  ", v.grasp_posture);
    s << indent << "pre_grasp_posture: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pre_grasp_posture);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAREHOUSE_MESSAGE_GRASP_H
