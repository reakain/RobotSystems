// Generated by gencpp from file warehouse/SetInTargetRequest.msg
// DO NOT EDIT!


#ifndef WAREHOUSE_MESSAGE_SETINTARGETREQUEST_H
#define WAREHOUSE_MESSAGE_SETINTARGETREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace warehouse
{
template <class ContainerAllocator>
struct SetInTargetRequest_
{
  typedef SetInTargetRequest_<ContainerAllocator> Type;

  SetInTargetRequest_()
    : goods()
    , position()  {
    }
  SetInTargetRequest_(const ContainerAllocator& _alloc)
    : goods(_alloc)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _goods_type;
  _goods_type goods;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::warehouse::SetInTargetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::warehouse::SetInTargetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetInTargetRequest_

typedef ::warehouse::SetInTargetRequest_<std::allocator<void> > SetInTargetRequest;

typedef boost::shared_ptr< ::warehouse::SetInTargetRequest > SetInTargetRequestPtr;
typedef boost::shared_ptr< ::warehouse::SetInTargetRequest const> SetInTargetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::warehouse::SetInTargetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::warehouse::SetInTargetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::warehouse::SetInTargetRequest_<ContainerAllocator1> & lhs, const ::warehouse::SetInTargetRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goods == rhs.goods &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::warehouse::SetInTargetRequest_<ContainerAllocator1> & lhs, const ::warehouse::SetInTargetRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace warehouse

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::warehouse::SetInTargetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::warehouse::SetInTargetRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::warehouse::SetInTargetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::warehouse::SetInTargetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::warehouse::SetInTargetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::warehouse::SetInTargetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::warehouse::SetInTargetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43f0c28a64c223b7f9e052a7a11ebdd1";
  }

  static const char* value(const ::warehouse::SetInTargetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43f0c28a64c223b7ULL;
  static const uint64_t static_value2 = 0xf9e052a7a11ebdd1ULL;
};

template<class ContainerAllocator>
struct DataType< ::warehouse::SetInTargetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "warehouse/SetInTargetRequest";
  }

  static const char* value(const ::warehouse::SetInTargetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::warehouse::SetInTargetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] goods\n"
"string[] position\n"
;
  }

  static const char* value(const ::warehouse::SetInTargetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::warehouse::SetInTargetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goods);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetInTargetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::warehouse::SetInTargetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::warehouse::SetInTargetRequest_<ContainerAllocator>& v)
  {
    s << indent << "goods[]" << std::endl;
    for (size_t i = 0; i < v.goods.size(); ++i)
    {
      s << indent << "  goods[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goods[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAREHOUSE_MESSAGE_SETINTARGETREQUEST_H
